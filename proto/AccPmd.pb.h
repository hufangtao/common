// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AccPmd.proto

#ifndef PROTOBUF_INCLUDED_AccPmd_2eproto
#define PROTOBUF_INCLUDED_AccPmd_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_AccPmd_2eproto 

namespace protobuf_AccPmd_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_AccPmd_2eproto
namespace PlatPmd {
class AccPmd;
class AccPmdDefaultTypeInternal;
extern AccPmdDefaultTypeInternal _AccPmd_default_instance_;
class LoginPmd_C2S;
class LoginPmd_C2SDefaultTypeInternal;
extern LoginPmd_C2SDefaultTypeInternal _LoginPmd_C2S_default_instance_;
class LoginPmd_S2C;
class LoginPmd_S2CDefaultTypeInternal;
extern LoginPmd_S2CDefaultTypeInternal _LoginPmd_S2C_default_instance_;
}  // namespace PlatPmd
namespace google {
namespace protobuf {
template<> ::PlatPmd::AccPmd* Arena::CreateMaybeMessage<::PlatPmd::AccPmd>(Arena*);
template<> ::PlatPmd::LoginPmd_C2S* Arena::CreateMaybeMessage<::PlatPmd::LoginPmd_C2S>(Arena*);
template<> ::PlatPmd::LoginPmd_S2C* Arena::CreateMaybeMessage<::PlatPmd::LoginPmd_S2C>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace PlatPmd {

enum AccPmd_Param {
  AccPmd_Param_LoginAccPmd_C2S = 0,
  AccPmd_Param_LoginAccPmd_S2C = 1,
  AccPmd_Param_AccPmd_Param_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AccPmd_Param_AccPmd_Param_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AccPmd_Param_IsValid(int value);
const AccPmd_Param AccPmd_Param_Param_MIN = AccPmd_Param_LoginAccPmd_C2S;
const AccPmd_Param AccPmd_Param_Param_MAX = AccPmd_Param_LoginAccPmd_S2C;
const int AccPmd_Param_Param_ARRAYSIZE = AccPmd_Param_Param_MAX + 1;

const ::google::protobuf::EnumDescriptor* AccPmd_Param_descriptor();
inline const ::std::string& AccPmd_Param_Name(AccPmd_Param value) {
  return ::google::protobuf::internal::NameOfEnum(
    AccPmd_Param_descriptor(), value);
}
inline bool AccPmd_Param_Parse(
    const ::std::string& name, AccPmd_Param* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AccPmd_Param>(
    AccPmd_Param_descriptor(), name, value);
}
enum Error {
  LoginOk = 0,
  TokenFindError = 1,
  TokenDiffError = 2,
  VersionError = 3,
  Error_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Error_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Error_IsValid(int value);
const Error Error_MIN = LoginOk;
const Error Error_MAX = VersionError;
const int Error_ARRAYSIZE = Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_descriptor();
inline const ::std::string& Error_Name(Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_descriptor(), value);
}
inline bool Error_Parse(
    const ::std::string& name, Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error>(
    Error_descriptor(), name, value);
}
// ===================================================================

class AccPmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlatPmd.AccPmd) */ {
 public:
  AccPmd();
  virtual ~AccPmd();

  AccPmd(const AccPmd& from);

  inline AccPmd& operator=(const AccPmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccPmd(AccPmd&& from) noexcept
    : AccPmd() {
    *this = ::std::move(from);
  }

  inline AccPmd& operator=(AccPmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccPmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccPmd* internal_default_instance() {
    return reinterpret_cast<const AccPmd*>(
               &_AccPmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AccPmd* other);
  friend void swap(AccPmd& a, AccPmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccPmd* New() const final {
    return CreateMaybeMessage<AccPmd>(NULL);
  }

  AccPmd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccPmd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccPmd& from);
  void MergeFrom(const AccPmd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccPmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AccPmd_Param Param;
  static const Param LoginAccPmd_C2S =
    AccPmd_Param_LoginAccPmd_C2S;
  static const Param LoginAccPmd_S2C =
    AccPmd_Param_LoginAccPmd_S2C;
  static inline bool Param_IsValid(int value) {
    return AccPmd_Param_IsValid(value);
  }
  static const Param Param_MIN =
    AccPmd_Param_Param_MIN;
  static const Param Param_MAX =
    AccPmd_Param_Param_MAX;
  static const int Param_ARRAYSIZE =
    AccPmd_Param_Param_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Param_descriptor() {
    return AccPmd_Param_descriptor();
  }
  static inline const ::std::string& Param_Name(Param value) {
    return AccPmd_Param_Name(value);
  }
  static inline bool Param_Parse(const ::std::string& name,
      Param* value) {
    return AccPmd_Param_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlatPmd.AccPmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_AccPmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginPmd_C2S : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlatPmd.LoginPmd_C2S) */ {
 public:
  LoginPmd_C2S();
  virtual ~LoginPmd_C2S();

  LoginPmd_C2S(const LoginPmd_C2S& from);

  inline LoginPmd_C2S& operator=(const LoginPmd_C2S& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginPmd_C2S(LoginPmd_C2S&& from) noexcept
    : LoginPmd_C2S() {
    *this = ::std::move(from);
  }

  inline LoginPmd_C2S& operator=(LoginPmd_C2S&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginPmd_C2S& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginPmd_C2S* internal_default_instance() {
    return reinterpret_cast<const LoginPmd_C2S*>(
               &_LoginPmd_C2S_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginPmd_C2S* other);
  friend void swap(LoginPmd_C2S& a, LoginPmd_C2S& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginPmd_C2S* New() const final {
    return CreateMaybeMessage<LoginPmd_C2S>(NULL);
  }

  LoginPmd_C2S* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginPmd_C2S>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginPmd_C2S& from);
  void MergeFrom(const LoginPmd_C2S& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginPmd_C2S* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string platform = 1;
  void clear_platform();
  static const int kPlatformFieldNumber = 1;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // string game_account_id = 2;
  void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 2;
  const ::std::string& game_account_id() const;
  void set_game_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_game_account_id(::std::string&& value);
  #endif
  void set_game_account_id(const char* value);
  void set_game_account_id(const char* value, size_t size);
  ::std::string* mutable_game_account_id();
  ::std::string* release_game_account_id();
  void set_allocated_game_account_id(::std::string* game_account_id);

  // string game_account_sign = 3;
  void clear_game_account_sign();
  static const int kGameAccountSignFieldNumber = 3;
  const ::std::string& game_account_sign() const;
  void set_game_account_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_game_account_sign(::std::string&& value);
  #endif
  void set_game_account_sign(const char* value);
  void set_game_account_sign(const char* value, size_t size);
  ::std::string* mutable_game_account_sign();
  ::std::string* release_game_account_sign();
  void set_allocated_game_account_sign(::std::string* game_account_sign);

  // string channel_open_id = 4;
  void clear_channel_open_id();
  static const int kChannelOpenIdFieldNumber = 4;
  const ::std::string& channel_open_id() const;
  void set_channel_open_id(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_open_id(::std::string&& value);
  #endif
  void set_channel_open_id(const char* value);
  void set_channel_open_id(const char* value, size_t size);
  ::std::string* mutable_channel_open_id();
  ::std::string* release_channel_open_id();
  void set_allocated_channel_open_id(::std::string* channel_open_id);

  // string channel_param = 5;
  void clear_channel_param();
  static const int kChannelParamFieldNumber = 5;
  const ::std::string& channel_param() const;
  void set_channel_param(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_param(::std::string&& value);
  #endif
  void set_channel_param(const char* value);
  void set_channel_param(const char* value, size_t size);
  ::std::string* mutable_channel_param();
  ::std::string* release_channel_param();
  void set_allocated_channel_param(::std::string* channel_param);

  // @@protoc_insertion_point(class_scope:PlatPmd.LoginPmd_C2S)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr game_account_id_;
  ::google::protobuf::internal::ArenaStringPtr game_account_sign_;
  ::google::protobuf::internal::ArenaStringPtr channel_open_id_;
  ::google::protobuf::internal::ArenaStringPtr channel_param_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_AccPmd_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginPmd_S2C : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlatPmd.LoginPmd_S2C) */ {
 public:
  LoginPmd_S2C();
  virtual ~LoginPmd_S2C();

  LoginPmd_S2C(const LoginPmd_S2C& from);

  inline LoginPmd_S2C& operator=(const LoginPmd_S2C& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginPmd_S2C(LoginPmd_S2C&& from) noexcept
    : LoginPmd_S2C() {
    *this = ::std::move(from);
  }

  inline LoginPmd_S2C& operator=(LoginPmd_S2C&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginPmd_S2C& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginPmd_S2C* internal_default_instance() {
    return reinterpret_cast<const LoginPmd_S2C*>(
               &_LoginPmd_S2C_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LoginPmd_S2C* other);
  friend void swap(LoginPmd_S2C& a, LoginPmd_S2C& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginPmd_S2C* New() const final {
    return CreateMaybeMessage<LoginPmd_S2C>(NULL);
  }

  LoginPmd_S2C* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginPmd_S2C>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginPmd_S2C& from);
  void MergeFrom(const LoginPmd_S2C& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginPmd_S2C* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string channel_open_id = 3;
  void clear_channel_open_id();
  static const int kChannelOpenIdFieldNumber = 3;
  const ::std::string& channel_open_id() const;
  void set_channel_open_id(const ::std::string& value);
  #if LANG_CXX11
  void set_channel_open_id(::std::string&& value);
  #endif
  void set_channel_open_id(const char* value);
  void set_channel_open_id(const char* value, size_t size);
  ::std::string* mutable_channel_open_id();
  ::std::string* release_channel_open_id();
  void set_allocated_channel_open_id(::std::string* channel_open_id);

  // string game_account_id = 4;
  void clear_game_account_id();
  static const int kGameAccountIdFieldNumber = 4;
  const ::std::string& game_account_id() const;
  void set_game_account_id(const ::std::string& value);
  #if LANG_CXX11
  void set_game_account_id(::std::string&& value);
  #endif
  void set_game_account_id(const char* value);
  void set_game_account_id(const char* value, size_t size);
  ::std::string* mutable_game_account_id();
  ::std::string* release_game_account_id();
  void set_allocated_game_account_id(::std::string* game_account_id);

  // string game_account_sign = 5;
  void clear_game_account_sign();
  static const int kGameAccountSignFieldNumber = 5;
  const ::std::string& game_account_sign() const;
  void set_game_account_sign(const ::std::string& value);
  #if LANG_CXX11
  void set_game_account_sign(::std::string&& value);
  #endif
  void set_game_account_sign(const char* value);
  void set_game_account_sign(const char* value, size_t size);
  ::std::string* mutable_game_account_sign();
  ::std::string* release_game_account_sign();
  void set_allocated_game_account_sign(::std::string* game_account_sign);

  // string game_login_key = 6;
  void clear_game_login_key();
  static const int kGameLoginKeyFieldNumber = 6;
  const ::std::string& game_login_key() const;
  void set_game_login_key(const ::std::string& value);
  #if LANG_CXX11
  void set_game_login_key(::std::string&& value);
  #endif
  void set_game_login_key(const char* value);
  void set_game_login_key(const char* value, size_t size);
  ::std::string* mutable_game_login_key();
  ::std::string* release_game_login_key();
  void set_allocated_game_login_key(::std::string* game_login_key);

  // int32 code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlatPmd.LoginPmd_S2C)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr channel_open_id_;
  ::google::protobuf::internal::ArenaStringPtr game_account_id_;
  ::google::protobuf::internal::ArenaStringPtr game_account_sign_;
  ::google::protobuf::internal::ArenaStringPtr game_login_key_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_AccPmd_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccPmd

// -------------------------------------------------------------------

// LoginPmd_C2S

// string platform = 1;
inline void LoginPmd_C2S::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_C2S::platform() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_C2S.platform)
  return platform_.GetNoArena();
}
inline void LoginPmd_C2S::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_C2S.platform)
}
#if LANG_CXX11
inline void LoginPmd_C2S::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_C2S.platform)
}
#endif
inline void LoginPmd_C2S::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_C2S.platform)
}
inline void LoginPmd_C2S::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_C2S.platform)
}
inline ::std::string* LoginPmd_C2S::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_C2S.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_C2S::release_platform() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_C2S.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_C2S::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_C2S.platform)
}

// string game_account_id = 2;
inline void LoginPmd_C2S::clear_game_account_id() {
  game_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_C2S::game_account_id() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_C2S.game_account_id)
  return game_account_id_.GetNoArena();
}
inline void LoginPmd_C2S::set_game_account_id(const ::std::string& value) {
  
  game_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_C2S.game_account_id)
}
#if LANG_CXX11
inline void LoginPmd_C2S::set_game_account_id(::std::string&& value) {
  
  game_account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_C2S.game_account_id)
}
#endif
inline void LoginPmd_C2S::set_game_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_C2S.game_account_id)
}
inline void LoginPmd_C2S::set_game_account_id(const char* value, size_t size) {
  
  game_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_C2S.game_account_id)
}
inline ::std::string* LoginPmd_C2S::mutable_game_account_id() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_C2S.game_account_id)
  return game_account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_C2S::release_game_account_id() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_C2S.game_account_id)
  
  return game_account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_C2S::set_allocated_game_account_id(::std::string* game_account_id) {
  if (game_account_id != NULL) {
    
  } else {
    
  }
  game_account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_account_id);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_C2S.game_account_id)
}

// string game_account_sign = 3;
inline void LoginPmd_C2S::clear_game_account_sign() {
  game_account_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_C2S::game_account_sign() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_C2S.game_account_sign)
  return game_account_sign_.GetNoArena();
}
inline void LoginPmd_C2S::set_game_account_sign(const ::std::string& value) {
  
  game_account_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_C2S.game_account_sign)
}
#if LANG_CXX11
inline void LoginPmd_C2S::set_game_account_sign(::std::string&& value) {
  
  game_account_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_C2S.game_account_sign)
}
#endif
inline void LoginPmd_C2S::set_game_account_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_account_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_C2S.game_account_sign)
}
inline void LoginPmd_C2S::set_game_account_sign(const char* value, size_t size) {
  
  game_account_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_C2S.game_account_sign)
}
inline ::std::string* LoginPmd_C2S::mutable_game_account_sign() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_C2S.game_account_sign)
  return game_account_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_C2S::release_game_account_sign() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_C2S.game_account_sign)
  
  return game_account_sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_C2S::set_allocated_game_account_sign(::std::string* game_account_sign) {
  if (game_account_sign != NULL) {
    
  } else {
    
  }
  game_account_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_account_sign);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_C2S.game_account_sign)
}

// string channel_open_id = 4;
inline void LoginPmd_C2S::clear_channel_open_id() {
  channel_open_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_C2S::channel_open_id() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_C2S.channel_open_id)
  return channel_open_id_.GetNoArena();
}
inline void LoginPmd_C2S::set_channel_open_id(const ::std::string& value) {
  
  channel_open_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_C2S.channel_open_id)
}
#if LANG_CXX11
inline void LoginPmd_C2S::set_channel_open_id(::std::string&& value) {
  
  channel_open_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_C2S.channel_open_id)
}
#endif
inline void LoginPmd_C2S::set_channel_open_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_open_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_C2S.channel_open_id)
}
inline void LoginPmd_C2S::set_channel_open_id(const char* value, size_t size) {
  
  channel_open_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_C2S.channel_open_id)
}
inline ::std::string* LoginPmd_C2S::mutable_channel_open_id() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_C2S.channel_open_id)
  return channel_open_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_C2S::release_channel_open_id() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_C2S.channel_open_id)
  
  return channel_open_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_C2S::set_allocated_channel_open_id(::std::string* channel_open_id) {
  if (channel_open_id != NULL) {
    
  } else {
    
  }
  channel_open_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_open_id);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_C2S.channel_open_id)
}

// string channel_param = 5;
inline void LoginPmd_C2S::clear_channel_param() {
  channel_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_C2S::channel_param() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_C2S.channel_param)
  return channel_param_.GetNoArena();
}
inline void LoginPmd_C2S::set_channel_param(const ::std::string& value) {
  
  channel_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_C2S.channel_param)
}
#if LANG_CXX11
inline void LoginPmd_C2S::set_channel_param(::std::string&& value) {
  
  channel_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_C2S.channel_param)
}
#endif
inline void LoginPmd_C2S::set_channel_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_C2S.channel_param)
}
inline void LoginPmd_C2S::set_channel_param(const char* value, size_t size) {
  
  channel_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_C2S.channel_param)
}
inline ::std::string* LoginPmd_C2S::mutable_channel_param() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_C2S.channel_param)
  return channel_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_C2S::release_channel_param() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_C2S.channel_param)
  
  return channel_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_C2S::set_allocated_channel_param(::std::string* channel_param) {
  if (channel_param != NULL) {
    
  } else {
    
  }
  channel_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_param);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_C2S.channel_param)
}

// -------------------------------------------------------------------

// LoginPmd_S2C

// int32 code = 1;
inline void LoginPmd_S2C::clear_code() {
  code_ = 0;
}
inline ::google::protobuf::int32 LoginPmd_S2C::code() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_S2C.code)
  return code_;
}
inline void LoginPmd_S2C::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_S2C.code)
}

// int32 id = 2;
inline void LoginPmd_S2C::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LoginPmd_S2C::id() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_S2C.id)
  return id_;
}
inline void LoginPmd_S2C::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_S2C.id)
}

// string channel_open_id = 3;
inline void LoginPmd_S2C::clear_channel_open_id() {
  channel_open_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_S2C::channel_open_id() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_S2C.channel_open_id)
  return channel_open_id_.GetNoArena();
}
inline void LoginPmd_S2C::set_channel_open_id(const ::std::string& value) {
  
  channel_open_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_S2C.channel_open_id)
}
#if LANG_CXX11
inline void LoginPmd_S2C::set_channel_open_id(::std::string&& value) {
  
  channel_open_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_S2C.channel_open_id)
}
#endif
inline void LoginPmd_S2C::set_channel_open_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  channel_open_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_S2C.channel_open_id)
}
inline void LoginPmd_S2C::set_channel_open_id(const char* value, size_t size) {
  
  channel_open_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_S2C.channel_open_id)
}
inline ::std::string* LoginPmd_S2C::mutable_channel_open_id() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_S2C.channel_open_id)
  return channel_open_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_S2C::release_channel_open_id() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_S2C.channel_open_id)
  
  return channel_open_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_S2C::set_allocated_channel_open_id(::std::string* channel_open_id) {
  if (channel_open_id != NULL) {
    
  } else {
    
  }
  channel_open_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_open_id);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_S2C.channel_open_id)
}

// string game_account_id = 4;
inline void LoginPmd_S2C::clear_game_account_id() {
  game_account_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_S2C::game_account_id() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_S2C.game_account_id)
  return game_account_id_.GetNoArena();
}
inline void LoginPmd_S2C::set_game_account_id(const ::std::string& value) {
  
  game_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_S2C.game_account_id)
}
#if LANG_CXX11
inline void LoginPmd_S2C::set_game_account_id(::std::string&& value) {
  
  game_account_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_S2C.game_account_id)
}
#endif
inline void LoginPmd_S2C::set_game_account_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_S2C.game_account_id)
}
inline void LoginPmd_S2C::set_game_account_id(const char* value, size_t size) {
  
  game_account_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_S2C.game_account_id)
}
inline ::std::string* LoginPmd_S2C::mutable_game_account_id() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_S2C.game_account_id)
  return game_account_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_S2C::release_game_account_id() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_S2C.game_account_id)
  
  return game_account_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_S2C::set_allocated_game_account_id(::std::string* game_account_id) {
  if (game_account_id != NULL) {
    
  } else {
    
  }
  game_account_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_account_id);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_S2C.game_account_id)
}

// string game_account_sign = 5;
inline void LoginPmd_S2C::clear_game_account_sign() {
  game_account_sign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_S2C::game_account_sign() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_S2C.game_account_sign)
  return game_account_sign_.GetNoArena();
}
inline void LoginPmd_S2C::set_game_account_sign(const ::std::string& value) {
  
  game_account_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_S2C.game_account_sign)
}
#if LANG_CXX11
inline void LoginPmd_S2C::set_game_account_sign(::std::string&& value) {
  
  game_account_sign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_S2C.game_account_sign)
}
#endif
inline void LoginPmd_S2C::set_game_account_sign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_account_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_S2C.game_account_sign)
}
inline void LoginPmd_S2C::set_game_account_sign(const char* value, size_t size) {
  
  game_account_sign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_S2C.game_account_sign)
}
inline ::std::string* LoginPmd_S2C::mutable_game_account_sign() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_S2C.game_account_sign)
  return game_account_sign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_S2C::release_game_account_sign() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_S2C.game_account_sign)
  
  return game_account_sign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_S2C::set_allocated_game_account_sign(::std::string* game_account_sign) {
  if (game_account_sign != NULL) {
    
  } else {
    
  }
  game_account_sign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_account_sign);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_S2C.game_account_sign)
}

// string game_login_key = 6;
inline void LoginPmd_S2C::clear_game_login_key() {
  game_login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginPmd_S2C::game_login_key() const {
  // @@protoc_insertion_point(field_get:PlatPmd.LoginPmd_S2C.game_login_key)
  return game_login_key_.GetNoArena();
}
inline void LoginPmd_S2C::set_game_login_key(const ::std::string& value) {
  
  game_login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlatPmd.LoginPmd_S2C.game_login_key)
}
#if LANG_CXX11
inline void LoginPmd_S2C::set_game_login_key(::std::string&& value) {
  
  game_login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlatPmd.LoginPmd_S2C.game_login_key)
}
#endif
inline void LoginPmd_S2C::set_game_login_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlatPmd.LoginPmd_S2C.game_login_key)
}
inline void LoginPmd_S2C::set_game_login_key(const char* value, size_t size) {
  
  game_login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlatPmd.LoginPmd_S2C.game_login_key)
}
inline ::std::string* LoginPmd_S2C::mutable_game_login_key() {
  
  // @@protoc_insertion_point(field_mutable:PlatPmd.LoginPmd_S2C.game_login_key)
  return game_login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginPmd_S2C::release_game_login_key() {
  // @@protoc_insertion_point(field_release:PlatPmd.LoginPmd_S2C.game_login_key)
  
  return game_login_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginPmd_S2C::set_allocated_game_login_key(::std::string* game_login_key) {
  if (game_login_key != NULL) {
    
  } else {
    
  }
  game_login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_login_key);
  // @@protoc_insertion_point(field_set_allocated:PlatPmd.LoginPmd_S2C.game_login_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlatPmd

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PlatPmd::AccPmd_Param> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlatPmd::AccPmd_Param>() {
  return ::PlatPmd::AccPmd_Param_descriptor();
}
template <> struct is_proto_enum< ::PlatPmd::Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PlatPmd::Error>() {
  return ::PlatPmd::Error_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_AccPmd_2eproto
